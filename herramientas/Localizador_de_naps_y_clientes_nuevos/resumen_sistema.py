#!/usr/bin/env python3
"""
Resumen del sistema de an√°lisis de clientes prioritarios para Usittel
"""

import os
import pandas as pd
from datetime import datetime

def mostrar_resumen():
    """Muestra un resumen de los archivos generados y estad√≠sticas"""
    
    print("üéØ SISTEMA DE AN√ÅLISIS DE CLIENTES PRIORITARIOS - USITTEL")
    print("=" * 70)
    print(f"Fecha de generaci√≥n: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    print()
    
    # Buscar el archivo Excel m√°s reciente
    archivos_excel = [f for f in os.listdir('.') if f.startswith('clientes_prioritarios') and f.endswith('.xlsx')]
    
    if not archivos_excel:
        print("‚ùå No se encontraron archivos de resultados.")
        return
    
    archivo_mas_reciente = max(archivos_excel, key=os.path.getctime)
    
    print(f"üìÑ ARCHIVO PRINCIPAL: {archivo_mas_reciente}")
    print("-" * 70)
    
    try:
        # Leer el Excel principal
        df = pd.read_excel(archivo_mas_reciente, sheet_name='Clientes Prioritarios')
        
        print(f"üéØ CLIENTES PRIORITARIOS ENCONTRADOS: {len(df)}")
        print()
        
        # Estad√≠sticas generales
        print("üìä ESTAD√çSTICAS GENERALES:")
        print(f"   ‚Ä¢ Distancia promedio a NAP: {df['Distancia (metros)'].mean():.1f} metros")
        print(f"   ‚Ä¢ Distancia m√≠nima: {df['Distancia (metros)'].min():.1f} metros")
        print(f"   ‚Ä¢ Distancia m√°xima: {df['Distancia (metros)'].max():.1f} metros")
        print(f"   ‚Ä¢ Promedio puertos libres: {df['Porcentaje Puertos Libres (%)'].mean():.1f}%")
        print()
        
        # Estad√≠sticas por zona
        print("üó∫Ô∏è  DISTRIBUCI√ìN POR ZONA:")
        for zona in df['Zona'].unique():
            zona_data = df[df['Zona'] == zona]
            print(f"   ‚Ä¢ {zona}: {len(zona_data)} clientes")
            print(f"     - Distancia promedio: {zona_data['Distancia (metros)'].mean():.1f}m")
        print()
        
        # Top 10 clientes m√°s cercanos
        print("ü•á TOP 10 CLIENTES M√ÅS CERCANOS:")
        top_10 = df.head(10)
        for i, (_, cliente) in enumerate(top_10.iterrows(), 1):
            print(f"   {i:2d}. {cliente['Nombre del Cliente'][:30]:<30} - {cliente['Distancia (metros)']:>6.1f}m - {cliente['Zona']}")
        print()
        
        # NAPs m√°s demandadas
        print("üè¢ NAPs M√ÅS DEMANDADAS:")
        naps_demanda = df['NAP M√°s Cercana'].value_counts().head(10)
        for nap, cantidad in naps_demanda.items():
            print(f"   ‚Ä¢ {nap[:40]:<40} - {cantidad} clientes")
        print()
        
        # Buscar archivo de mapa correspondiente
        archivos_mapa = [f for f in os.listdir('.') if f.startswith('mapa_') and f.endswith('.html')]
        if archivos_mapa:
            mapa_mas_reciente = max(archivos_mapa, key=os.path.getctime)
            print(f"üó∫Ô∏è  MAPA INTERACTIVO: {mapa_mas_reciente}")
            print("   El mapa incluye:")
            print("   ‚Ä¢ Marcadores de clientes prioritarios por zona")
            print("   ‚Ä¢ Ubicaciones de NAPs con baja ocupaci√≥n")
            print("   ‚Ä¢ L√≠neas de conexi√≥n cliente-NAP m√°s cercana")
            print("   ‚Ä¢ Mapa de calor de concentraci√≥n de clientes")
            print("   ‚Ä¢ Informaci√≥n detallada en popups")
        print()
        
        # Archivos del sistema
        print("üìÅ ARCHIVOS DEL SISTEMA:")
        archivos_sistema = [
            ('configurar_sistema.py', 'Script de configuraci√≥n inicial'),
            ('generar_lista_prioritaria.py', 'Generador b√°sico (100 clientes)'),
            ('generar_lista_completa.py', 'Generador completo (todos los clientes)'),
            ('analizar_datos.py', 'Analizador de estructura de datos'),
            ('README.md', 'Documentaci√≥n completa'),
            ('cache_geocoding.json', 'Cache de coordenadas geocodificadas')
        ]
        
        for archivo, descripcion in archivos_sistema:
            estado = "‚úÖ" if os.path.exists(archivo) else "‚ùå"
            print(f"   {estado} {archivo:<30} - {descripcion}")
        print()
        
        # Recomendaciones de uso
        print("üí° RECOMENDACIONES PARA VICTORIA (VENDEDORA):")
        print("   1. Comenzar por los primeros 20 clientes de la lista")
        print("   2. Usar el mapa para planificar rutas eficientes")
        print("   3. Priorizar clientes en la misma zona geogr√°fica")
        print("   4. Mencionar la disponibilidad inmediata de conexi√≥n")
        print("   5. Destacar que est√°n cerca de infraestructura nueva")
        print()
        
        # Informaci√≥n t√©cnica
        print("‚öôÔ∏è  CONFIGURACI√ìN ACTUAL:")
        print("   ‚Ä¢ Radio de b√∫squeda: 150 metros")
        print("   ‚Ä¢ Ocupaci√≥n m√°xima de NAPs: 30%")
        print("   ‚Ä¢ Criterio de cliente: Estado contiene 'NO' (no contrat√≥/respondi√≥)")
        print("   ‚Ä¢ Geocodificaci√≥n: API Nominatim (OpenStreetMap)")
        print()
        
        print("üîÑ PARA ACTUALIZAR LOS DATOS:")
        print("   1. Actualizar 'base de datos copia.xlsx' con nuevos clientes")
        print("   2. Actualizar '../Localizador_de_naps/naps.xlsx' con estado de NAPs")
        print("   3. Ejecutar: python generar_lista_completa.py")
        print()
        
        print("=" * 70)
        print("‚úÖ SISTEMA LISTO PARA USO COMERCIAL")
        
    except Exception as e:
        print(f"‚ùå Error leyendo archivo: {e}")

if __name__ == "__main__":
    mostrar_resumen()
